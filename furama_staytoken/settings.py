"""
Django settings for furama_staytoken project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import warnings
from pathlib import Path
from urllib.parse import urlparse, parse_qs

from django.core.exceptions import ImproperlyConfigured
from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv, find_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Ưu tiên .env ở project root (nơi có manage.py)
env_path = BASE_DIR / ".env"
# Fallback: tự dò tìm .env ở các thư mục cha
load_dotenv(dotenv_path=env_path if env_path.exists() else find_dotenv())


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


def env_bool(key: str, default: bool = False) -> bool:
    if key not in os.environ:
        return default
    return os.environ[key].lower() in {"1", "true", "yes", "on"}


def env_list(key: str, default=None, *, separator: str = ","):
    value = os.getenv(key)
    if value is None:
        return [] if default is None else default
    return [item.strip() for item in value.split(separator) if item.strip()]


def require_env(key: str, *, allow_placeholder: bool = False) -> str:
    value = os.getenv(key)
    if value:
        if not allow_placeholder:
            placeholders = {
                "https://...",
                "https://your-rpc",
                "0xYourERC1155",
                "0xYourVoucherContract",
                "0xSIGNER_PRIVATE_KEY",
            }
            if value in placeholders:
                raise ImproperlyConfigured(f"Environment variable {key} still uses a placeholder value")
        return value
    raise ImproperlyConfigured(f"Environment variable {key} is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DJANGO_DEBUG", default=True)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY") or os.getenv("SECRET_KEY")
if not SECRET_KEY:
    if DEBUG:
        SECRET_KEY = get_random_secret_key()
        warnings.warn(
            "DJANGO_SECRET_KEY not provided; generated ephemeral key for development",
            RuntimeWarning,
        )
    else:
        raise ImproperlyConfigured("DJANGO_SECRET_KEY environment variable is required")

ALLOWED_HOSTS = ["*"]

# CSRF Trusted Origins - add domains as needed
# For development, you can add multiple domains
CSRF_TRUSTED_ORIGINS = env_list("CSRF_TRUSTED_ORIGINS", default=[
    "https://03c2c4b01dce.ngrok-free.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
])

# Disable CSRF for development (NOT recommended for production)
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "core",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # Disabled for development
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "core.middleware.RequireLoginMiddleware",
]

ROOT_URLCONF = 'furama_staytoken.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'furama_staytoken.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "staytoken"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "admin"),
        "HOST": os.getenv("DB_HOST", "127.0.0.1"),
        "PORT": os.getenv("DB_PORT", "5432"),
        "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "60")),
    }
}

DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL:
    parsed = urlparse(DATABASE_URL)
    if parsed.scheme not in {"postgres", "postgresql", "pgsql"}:
        raise ImproperlyConfigured("Only PostgreSQL DATABASE_URL is supported")
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": parsed.path.lstrip("/") or os.getenv("DB_NAME", "staytoken"),
        "USER": parsed.username or os.getenv("DB_USER", "postgres"),
        "PASSWORD": parsed.password or os.getenv("DB_PASSWORD", "admin"),
        "HOST": parsed.hostname or os.getenv("DB_HOST", "127.0.0.1"),
        "PORT": str(parsed.port or os.getenv("DB_PORT", "5432")),
        "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "60")),
    }
    query = parse_qs(parsed.query)
    if query:
        DATABASES["default"]["OPTIONS"] = {k: v[0] for k, v in query.items() if v}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "vi")
TIME_ZONE = os.getenv("TIME_ZONE", "Asia/Ho_Chi_Minh")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --------- App configs ----------
ST_PROVIDER = os.getenv("ST_PROVIDER", "privy")
ST_CHAIN_ID = int(os.getenv("ST_CHAIN_ID", os.getenv("CHAIN_ID", "8453")))
ST_RPC_URL = require_env("ST_RPC_URL")
ST_ERC1155_SIGNER = require_env("ST_ERC1155_SIGNER")
ST_DEFAULT_CONTRACT = require_env("ST_DEFAULT_CONTRACT")
ST_RATE_LIMIT_PER_10M = int(os.getenv("ST_RATE_LIMIT_PER_10M", "3"))
ST_OTP_LIMIT_PER_EMAIL = int(os.getenv("ST_OTP_LIMIT_PER_EMAIL", "5"))
ST_OTP_LIMIT_PER_IP = int(os.getenv("ST_OTP_LIMIT_PER_IP", "20"))
ST_OTP_WINDOW_SECONDS = int(os.getenv("ST_OTP_WINDOW_SECONDS", "300"))
ST_DEMO_MODE = env_bool("ST_DEMO_MODE", False)
ST_POS_VERIFY_ONCHAIN = env_bool("ST_POS_VERIFY_ONCHAIN", False)

# POS API bảo vệ bằng khóa đơn giản
ST_POS_API_KEY = os.getenv("ST_POS_API_KEY")
if not ST_POS_API_KEY:
    warnings.warn("ST_POS_API_KEY not set; POS endpoints will reject requests", RuntimeWarning)

ST_WALLET_STORE_DIR = Path(os.getenv("ST_WALLET_STORE_DIR", BASE_DIR / "wallet_store")).resolve()
ST_WALLET_STORE_DIR.mkdir(parents=True, exist_ok=True)
ST_WALLET_ENCRYPTION_KEY = os.getenv("ST_WALLET_ENCRYPTION_KEY")
ST_ALLOW_KEY_EXPORT = env_bool("ST_ALLOW_KEY_EXPORT", False)

# Optional blockchain explorer prefixes (set in .env if you want clickable links)
ST_EXPLORER_TX_PREFIX = os.getenv("ST_EXPLORER_TX_PREFIX", "")  # e.g. https://basescan.org/tx/
ST_EXPLORER_ADDR_PREFIX = os.getenv("ST_EXPLORER_ADDR_PREFIX", "")  # e.g. https://basescan.org/address/


# QR image cache (tùy chọn)
ST_QR_CACHE_DIR = Path(os.getenv("ST_QR_CACHE_DIR", BASE_DIR / "qr_cache")).resolve()
ST_QR_CACHE_DIR.mkdir(parents=True, exist_ok=True)

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@staytoken.local")

# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_HOST_USER = os.getenv("SMTP_USER")
# EMAIL_HOST_PASSWORD = os.getenv("SMTP_PASS")
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = "no-reply@furama.vn"
